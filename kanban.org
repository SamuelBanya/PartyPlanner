* Kanban Board
** Backlog
** In Progress
** In Review
** Completed
*** DONE Setup Kanban board org file
<2023-03-06 Mon 19:53>: I did some research, and found a Reddit thread on this topic:
- https://www.reddit.com/r/emacs/comments/bs8rpm/doing_kanban_in_org_mode/

I saw a few of the packages they used, and honestly, even though I could get the same experience by making a swim lane from left to right, it's probably just easier to make an Org Mode
*** DONE Fix NVM issue with node version 16 when deploying project
<2023-03-06 Mon 19:52>: When I tried deploying the project locally, I was getting an error that the latest version of Node was being used, when in reality, this project was made with Node version 16 because I guess Flatiron's backend templates were stuck on Node version 16.

That being noted, I used this guide as a reference:
- https://heynode.com/tutorial/install-nodejs-locally-nvm/

With this in mind, I was able to fix this issue by using the following commands:
#+begin_src bash
nvm install 16
nvm alias default 16
#+end_src

Now my node version defaults to Node version 16

*** DONE Fix Google Maps API key when deploying Party Planner locally
<2023-03-06 Mon 19:33>: I first deployed the project locally, and realized I got the 'NoApiKeys' error:
- https://developers.google.com/maps/documentation/javascript/error-messages#no-api-keys

I was able to fix this by adding a '.env' file locally with the help of this guide that triggered me to remember that I had to do this within the 'client' directory:
- https://www.architect.io/blog/2022-08-16/react-environment-variables-developers-guide/

I also had to add a reference to the 'REACT_APP_GOOGLE_API_KEY' variable itself and set it equal to the actual Google Maps API key value found on the related Google Maps API key site (https://console.cloud.google.com/google/maps-apis/credentials)
*** DONE Reconfigure Emacs to easily handle JSX files
<2023-03-06 Mon 19:35>: This isn't necessarily project related, but if I want to get anything major done going forward with Emacs and this project, they are going to have to work nicely together, and just as as good as VS Code was with indentation and 'just knowing' the bare minimum of how JSX return statement syntax should look.

<2023-03-06 Mon 19:44>: One GIST I found is this one that goes into depth on using 'web-mode', 'eslint', and 'Prettier.js':
- https://gist.github.com/CodyReichert/9dbc8bd2a104780b64891d8736682cea

However, I did ask around online to see if there's a better way to do this, because I don't want to have to rely on Prettier.js to constantly save a file just to get automatic indentation, which I think is dumb since all modern IDE's do this by default.

<2023-03-21 Tue 18:27>: I went ahead and basically just configured my Emacs config to treat all '.js' file as if they were '.jsx' files because of how weird React can be, since it totally uses '.js' files even though it really means '.jsx' at times.

That being said I was able to force this in my config, and the syntax highlighting works without a single issue.
*** DONE Add 'summary title cards' to 'Summary' component page
<2023-03-06 Mon 19:39>: As Ryan mentioned, I should look into making the summary page actually look decent in comparison. The data is there, so I just need to make it look more presentable.

<2023-03-21 Tue 18:34>: I used these commands to install 'nvm' on Linux aka Linux Mint for the time being on the Thinkpad laptop I'm currently using:
#+begin_src bash
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
#+end_src

<2023-03-21 Tue 19:18>: I had to go through a ton of research since 'nvm list' was only producing 'N/A' results.

The proper way to list the current versions of Node versions that are available is through this command:
#+begin_src bash
nvm ls-remote
#+end_src

I found this out through this StackOverflow post:
- https://stackoverflow.com/questions/26476744/nvm-ls-remote-command-results-in-n-a

I then figured out how to install Node Version 16 via this Gist since I know that the Party Planner and other Flatiron based projects are dependent on Node Version 16:
- https://gist.github.com/d2s/372b5943bce17b964a79

<2023-03-21 Tue 20:01>: I did some research on this topic, and it seems like this 'card' idea is really tied to MaterialUI.

That being noted, I can just easily add MaterialUI as an additional component for this project, and literally only use it in the 'Summary' page anyway.

This is especially useful since I don't need ALL of the MaterialUI components anyway, and just want to use the card element specifically.

Here are related reference links I found on this topic:
- https://mui.com/material-ui/getting-started/installation/
- https://www.geeksforgeeks.org/how-to-use-card-component-in-reactjs/
- https://mui.com/material-ui/react-card/

These are the commands I used to install MaterialUI in the 'client' project directory for this project:
#+begin_src bash
npm install @mui/material @emotion/react @emotion/styled
npm install @fontsource/roboto
#+end_src

<2023-03-21 Tue 20:08>: I then installed 'Rails' on Linux Mint by referencing this guide:
- https://linuxopsys.com/topics/install-ruby-on-rails-on-ubuntu

<2023-03-21 Tue 20:28>: I installed 'rvm' by going through the arduous process of the following commands:
#+begin_src bash
wget https://www.openssl.org/source/openssl-1.1.1g.tar.gz
tar zxvf openssl-1.1.1g.tar.gz

cd openssl-1.1.1g
./config --prefix=$HOME/.openssl/openssl-1.1.1g --openssldir=$HOME/.openssl/openssl-1.1.1g

make
make test

make install

rm -rf ~/.openssl/openssl-1.1.1g/certs
ln -s /etc/ssl/certs ~/.openssl/openssl-1.1.1g/certs
#+end_src

I then referred to this GitHub page on how to install 'rvm' via the related Ubuntu package:
- https://github.com/rvm/ubuntu_rvm

I then used the following related commands to install 'rvm' on Linux Mint:
#+begin_src bash
sudo apt-add-repository -y ppa:rael-gc/rvm
sudo apt-get update
sudo apt-get install rvm
sudo usermod -a -G rvm $USER
#+end_src

After installing 'rvm' via the Ubuntu based PPA instructions above, I then used the following command:
#+begin_src bash
rvm install 2.7.4 --with-openssl-dir=$HOME/.openssl/openssl-1.1.1g
#+end_src

I used this as a reference:
- https://github.com/SamuelBanya/phase-4-deploying-rails-api-to-render

I then used the following commands:
#+begin_src bash
gem install bundler
gem install rails
sudo apt update
sudo apt install postgresql postgresql-contrib libpq-dev
sudo service postgresql start
sudo -u postgres -i
createuser -sr sam
#+end_src

<2023-03-22 Wed 15:59>: I was able to deploy this locally thankfully after using the following commands to create and migrate the database accordingly:
#+begin_src bash
rails db:create
rails db:migrate
#+end_src

I then migrated the MaterialUI 'Card' component example to the project. I also figured out how to modify the background color by using an inline style change via the ideas presented in these two StackOverflow posts
- https://stackoverflow.com/questions/58799624/how-to-change-background-color-in-react-materialui-card
- https://stackoverflow.com/questions/48849340/how-to-add-linear-gradient-color-to-mui-chip-background
*** DONE Make text revisions to various text boxes and buttons throughout application
<2023-03-22 Wed 16:18>: I noticed there were minor weird things like 'Name of Location' present when in reality, they should be 'Address of Location' instead. I have corrected this throughout the application, and also changed the 'value' tags present in the buttons themselves as well.

Related reference on changing the 'value' tag of a simple 'input' tag:
- https://www.studytonight.com/html-faq/how-to-change-text-of-form-submit-button
*** DONE Add MaterialUI style fields and buttons to existing component pages
<2023-03-23 Thu 12:22>: I am borrowing heavily from this project I already did, more specifically this section of the project as it contains very similar ideas that I could just use to swap out with MaterialUI style fields
- https://github.com/SamuelBanya/SmoothMoves-Frontend/blob/main/src/components/moveComponents/CreateMoveForm.js

<2023-03-23 Thu 14:19>: I used these links as references for weird styling issues I encountered:
- StackOverflow reference for how to use 'InputLabelProps' property to force the labels for 'TextField' components to automatically shrink since they're being automatically given values in my application:
- https://stackoverflow.com/questions/68480218/material-ui-textfield-label-does-not-move-up-when-the-value-for-textfield-is-set
- How to use the 'spacing' property for 'Grid' MaterialUI components so that the form components have a bit more space as needed:
- https://stackoverflow.com/questions/60760224/how-to-give-space-in-between-the-fields-in-material-ui
- How to add another 'Grid' item to add an additional space before the 'Button' component in MaterialUI:
- https://stackoverflow.com/questions/63295022/how-to-add-a-new-row-for-grid-item-in-material-ui
*** DONE Add checks to new date timestamp widgets to ensure that the 'Start_Time' is NOT later than the 'End_Time'
<2023-03-30 Thu 12:41>: I need to add checks to ensure that the date timestamp widgets don't have a 'Start_Time' that is later than the 'End_Time'.

<2023-03-30 Thu 21:30>: I was able to add validation via this MaterialUI docs page on the topic of 'minDate' and 'maxDate':
- https://mui.com/x/react-date-pickers/validation/
*** DONE Add date timestamp widget to 'Add Party' and 'Edit Party' component pages
<2023-03-23 Thu 12:24>: Instead of having to force the user to manually type in the time, it would be nice for them to be able to just pick a date and timestamp automatically. I will have to look into NPM for a related package.

<2023-03-23 Thu 15:27>: I don't think I actually need a random NPM package since I can probably just use MaterialUI's 'date-picker' components fonud here:
- https://mui.com/x/react-date-pickers/getting-started/

This will require a bit of time since I have to use 'npm install' to install the related components, and to import them into the correct sections within the 'Add Party' and 'Edit Party' component pages.

<2023-03-30 Thu 12:42>: I installed the '@mui/x-date-pickers' package as well as its dependencies via the following commands:
#+begin_src bash
npm install @mui/x-date-pickers
npm install @mui/material @emotion/react @emotion/styled
npm install dayjs
#+end_src

I then wrapped the 'LocalizationProvider' around the entire app within 'App.js' as directed by MaterialUI's docs.

<2023-03-30 Thu 21:32>: For the time being, I was able to get the 'Add Parties' component to work just fine, but it took a TON of revisions and really paying attention in terms of how to implement the actual solutions provided from the MaterialUI docs page here, specifically the section under the 'Uncontrolled vs. Controlled' sections:
- https://mui.com/x/react-date-pickers/date-time-picker/

This API page was a bit helpful as well for this topic:
- https://mui.com/x/api/date-pickers/date-time-picker/

<2023-03-30 Thu 23:11>: I was able to make the changes successfully with a lot of overall, and a lot of work, but alas it got done :)
*** DONE Add autocompletion for address based form for 'Add Location' and 'Edit Location' component pages
<2023-03-23 Thu 12:23>: I would like to research if it's possible to add autocompleted address forms for MaterialUI based fields to make the process easier.

<2023-03-23 Thu 15:23>: This will most likely again require a Google Maps API key since this is probably best suited for Google's 'Place Autocomplete' API:
- https://developers.google.com/maps/documentation/javascript/place-autocomplete

More specifically, MaterialUI DOES have their own version of this, and the more saner approach is to literally rip it from the Material UI Docs page, and just change the fields to suit what is currently present for the location based fields in the 'Add Location' and 'Edit Location' component pages:
- https://mui.com/material-ui/react-autocomplete/

This however will require a lot of work to be able to implement.

<2023-04-04 Tue 18:33>: I am in the process of figuring out how to actually utilize the Google Maps autocomplete example from MaterialUI docs in my project slowly, bit by bit.

The one thing I had to install due to the related '@mui/icons-material/LocationOn' icon that's needed from the example was the following MaterialUI specific package:
#+begin_src bash
npm install @mui/icons-material
#+end_src

I also had to install this package as well:
#+begin_src bash
npm install autosuggest-highlight
#+end_src

<2023-04-06 Thu 12:10>: I have been having difficulties trying to implement the MaterialUI Docs page example because it is a self contained React component that you import into wherever you want.

There are 3 potential solutions to this issue:
1. I figure out how to pass the 'value' state variable from the '<GoogleMaps />' component to the parent 'AddLocation.js' component
2. I literally just forgo the whole import idea and just place the entireity of the '<GoogleMaps />' component into the 'AddLocation.js' component
3. I disassemble the '<GoogleMaps />' component into its barebones so I can just interact with the '<Autocomplete />' field from MaterialUI without all of the extra noise
4. I look for any related examples online of anyone who has incorporated a Google Maps based '<Autocomplete />' Material UI component into a React controlled form

<2023-04-06 Thu 12:24>: Advice from online:
#+begin_src text
You need to lift the state up. [value, setValue] from the parent, and pass the setter function to the child
(and optionally the value itself, if the child needs it)

Yeah, just define the state in <AddLocation> and pass it down to <GoogleMaps> as a prop
you dont "pass UP" the data. it flows downwards in react
#+end_src

<2023-04-06 Thu 13:16>: I was able to get the 'GoogleMaps' component work successfully by passing the related 'value' via props DOWN from the 'AddLocationForm.js' component to the 'GoogleMaps.js' component

<2023-04-06 Thu 16:13>: I was also able to add this functionality to the 'EditLocationForm.js' component in a similar manner, though it required a bit of fiddling around with the output data.

I also improved the Summary page a slight bit as a result, and the overall feel is definitely improved as a result.
